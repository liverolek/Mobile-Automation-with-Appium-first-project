"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assertIDB = assertIDB;
exports.default = exports.commands = void 0;
exports.parseXCTestStdout = parseXCTestStdout;
require("source-map-support/register");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _support = require("appium/support");
var _lodash = _interopRequireDefault(require("lodash"));
var _driver = require("appium/driver");
const commands = {};
exports.commands = commands;
const XCTEST_TIMEOUT = 60 * 60 * 1000;
const xctestLog = _support.logger.getLogger('XCTest');
function assertIDB(opts) {
  var _opts$device;
  if (!((_opts$device = opts.device) !== null && _opts$device !== void 0 && _opts$device.idb) || !opts.launchWithIDB) {
    throw new Error(`To use XCTest runner, IDB (https://github.com/facebook/idb) must be installed ` + `and sessions must be run with the "launchWithIDB" capability`);
  }
  return opts.device.idb;
}
function parseXCTestStdout(stdout) {
  function parseKey(name) {
    const words = name.split(' ');
    let out = '';
    for (const word of words) {
      out += word.substr(0, 1).toUpperCase() + word.substr(1);
    }
    return out.substr(0, 1).toLowerCase() + out.substr(1);
  }
  function parseValue(value) {
    value = value || '';
    switch (value.toLowerCase()) {
      case 'true':
        return true;
      case 'false':
        return false;
      case '':
        return null;
      default:
        break;
    }
    if (!isNaN(value)) {
      if (!_lodash.default.isString(value)) {
        return 0;
      } else if (value.indexOf('.') > 0) {
        return parseFloat(value);
      }
      return parseInt(value, 10);
    }
    return value;
  }
  if (!stdout) {
    return [];
  }
  const lines = stdout.trim().split('\n');
  if (lines.length === 1 && !lines[0].includes('|')) {
    return [lines[0]];
  }
  const results = [];
  for (const line of lines) {
    const properties = line.split('|');
    const output = {};
    let entryIndex = 0;
    for (const prop of properties) {
      if (entryIndex === 0) {
        output.testName = prop.trim();
      } else if (prop.trim().startsWith('Location')) {
        output.location = prop.substring(prop.indexOf('Location') + 8).trim();
      } else {
        let [key, value] = prop.split(':');
        output[parseKey(key.trim())] = parseValue(value ? value.trim() : '');
      }
      entryIndex++;
    }
    if (!output.passed) {
      output.passed = output.status === 'passed';
      output.crashed = output.status === 'crashed';
    } else if (!output.status) {
      if (output.passed) {
        output.status = 'passed';
      } else if (output.crashed) {
        output.status = 'crashed';
      } else {
        output.status = 'failed';
      }
    }
    results.push(output);
  }
  return results;
}
commands.mobileRunXCTest = async function runXCTest({
  testRunnerBundleId,
  appUnderTestBundleId,
  xctestBundleId,
  testType = 'ui',
  env,
  args,
  timeout = XCTEST_TIMEOUT
}) {
  const subproc = await assertIDB(this.opts).runXCUITest(testRunnerBundleId, appUnderTestBundleId, xctestBundleId, {
    env,
    args,
    testType
  });
  return await new _bluebird.default((resolve, reject) => {
    let mostRecentLogObject = null;
    let xctestTimeout;
    let lastErrorMessage = null;
    if (timeout > 0) {
      xctestTimeout = setTimeout(() => reject(new _driver.errors.TimeoutError(`Timed out after '${timeout}ms' waiting for XCTest to complete`)), timeout);
    }
    subproc.on('output', (stdout, stderr) => {
      if (stdout) {
        try {
          mostRecentLogObject = parseXCTestStdout(stdout);
        } catch (err) {
          this.log.warn(`Failed to parse logs from test output: '${stdout}'`);
          this.log.debug(err.stack);
        }
      }
      if (stderr) {
        lastErrorMessage = stderr;
      }
      stdout && xctestLog.info(stdout);
      stderr && xctestLog.error(stderr);
    });
    subproc.on('exit', (code, signal) => {
      clearTimeout(xctestTimeout);
      if (code !== 0) {
        const err = new Error(lastErrorMessage || mostRecentLogObject);
        err.code = code;
        if (signal != null) {
          err.signal = signal;
        }
        if (mostRecentLogObject) {
          err.result = mostRecentLogObject;
        }
        return reject(err);
      }
      resolve({
        code,
        signal,
        results: mostRecentLogObject,
        passed: true
      });
    });
  });
};
commands.mobileInstallXCTestBundle = async function installXCTestBundle(opts) {
  const {
    xctestApp
  } = opts;
  if (!_lodash.default.isString(xctestApp)) {
    throw new _driver.errors.InvalidArgumentError(`'xctestApp' is a required parameter for 'installXCTestBundle' and ` + `must be a string. Found '${xctestApp}'`);
  }
  xctestLog.info(`Installing bundle '${xctestApp}'`);
  const idb = assertIDB(this.opts);
  const res = await this.helpers.configureApp(xctestApp, '.xctest');
  await idb.installXCTestBundle(res);
};
commands.mobileListXCTestBundles = async function listXCTestsInTestBundle() {
  return await assertIDB(this.opts).listXCTestBundles();
};
commands.mobileListXCTestsInTestBundle = async function listXCTestsInTestBundle(opts) {
  const {
    bundle
  } = opts;
  if (!_lodash.default.isString(bundle)) {
    throw new _driver.errors.InvalidArgumentError(`'bundle' is a required parameter for 'listXCTestsInTestBundle' and ` + `must be a string. Found '${bundle}'`);
  }
  const idb = assertIDB(this.opts);
  return await idb.listXCTestsInTestBundle(bundle);
};
Object.assign(commands);
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsIlhDVEVTVF9USU1FT1VUIiwieGN0ZXN0TG9nIiwibG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiYXNzZXJ0SURCIiwib3B0cyIsImRldmljZSIsImlkYiIsImxhdW5jaFdpdGhJREIiLCJFcnJvciIsInBhcnNlWENUZXN0U3Rkb3V0Iiwic3Rkb3V0IiwicGFyc2VLZXkiLCJuYW1lIiwid29yZHMiLCJzcGxpdCIsIm91dCIsIndvcmQiLCJzdWJzdHIiLCJ0b1VwcGVyQ2FzZSIsInRvTG93ZXJDYXNlIiwicGFyc2VWYWx1ZSIsInZhbHVlIiwiaXNOYU4iLCJfIiwiaXNTdHJpbmciLCJpbmRleE9mIiwicGFyc2VGbG9hdCIsInBhcnNlSW50IiwibGluZXMiLCJ0cmltIiwibGVuZ3RoIiwiaW5jbHVkZXMiLCJyZXN1bHRzIiwibGluZSIsInByb3BlcnRpZXMiLCJvdXRwdXQiLCJlbnRyeUluZGV4IiwicHJvcCIsInRlc3ROYW1lIiwic3RhcnRzV2l0aCIsImxvY2F0aW9uIiwic3Vic3RyaW5nIiwia2V5IiwicGFzc2VkIiwic3RhdHVzIiwiY3Jhc2hlZCIsInB1c2giLCJtb2JpbGVSdW5YQ1Rlc3QiLCJydW5YQ1Rlc3QiLCJ0ZXN0UnVubmVyQnVuZGxlSWQiLCJhcHBVbmRlclRlc3RCdW5kbGVJZCIsInhjdGVzdEJ1bmRsZUlkIiwidGVzdFR5cGUiLCJlbnYiLCJhcmdzIiwidGltZW91dCIsInN1YnByb2MiLCJydW5YQ1VJVGVzdCIsIkIiLCJyZXNvbHZlIiwicmVqZWN0IiwibW9zdFJlY2VudExvZ09iamVjdCIsInhjdGVzdFRpbWVvdXQiLCJsYXN0RXJyb3JNZXNzYWdlIiwic2V0VGltZW91dCIsImVycm9ycyIsIlRpbWVvdXRFcnJvciIsIm9uIiwic3RkZXJyIiwiZXJyIiwibG9nIiwid2FybiIsImRlYnVnIiwic3RhY2siLCJpbmZvIiwiZXJyb3IiLCJjb2RlIiwic2lnbmFsIiwiY2xlYXJUaW1lb3V0IiwicmVzdWx0IiwibW9iaWxlSW5zdGFsbFhDVGVzdEJ1bmRsZSIsImluc3RhbGxYQ1Rlc3RCdW5kbGUiLCJ4Y3Rlc3RBcHAiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsInJlcyIsImhlbHBlcnMiLCJjb25maWd1cmVBcHAiLCJtb2JpbGVMaXN0WENUZXN0QnVuZGxlcyIsImxpc3RYQ1Rlc3RzSW5UZXN0QnVuZGxlIiwibGlzdFhDVGVzdEJ1bmRsZXMiLCJtb2JpbGVMaXN0WENUZXN0c0luVGVzdEJ1bmRsZSIsImJ1bmRsZSIsIk9iamVjdCIsImFzc2lnbiJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tYW5kcy94Y3Rlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS9kcml2ZXInO1xuXG5cbmNvbnN0IGNvbW1hbmRzID0ge307XG5cbmNvbnN0IFhDVEVTVF9USU1FT1VUID0gNjAgKiA2MCAqIDEwMDA7IC8vIDYwIG1pbnV0ZSB0aW1lb3V0XG5cbmNvbnN0IHhjdGVzdExvZyA9IGxvZ2dlci5nZXRMb2dnZXIoJ1hDVGVzdCcpO1xuXG4vKipcbiAqIEFzc2VydHMgdGhhdCBJREIgaXMgcHJlc2VudCBhbmQgdGhhdCBsYXVuY2hXaXRoSURCIHdhcyB1c2VkXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgT3B0cyBvYmplY3QgZnJvbSB0aGUgZHJpdmVyIGluc3RhbmNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRJREIgKG9wdHMpIHtcbiAgaWYgKCFvcHRzLmRldmljZT8uaWRiIHx8ICFvcHRzLmxhdW5jaFdpdGhJREIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFRvIHVzZSBYQ1Rlc3QgcnVubmVyLCBJREIgKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9pZGIpIG11c3QgYmUgaW5zdGFsbGVkIGAgK1xuICAgICAgYGFuZCBzZXNzaW9ucyBtdXN0IGJlIHJ1biB3aXRoIHRoZSBcImxhdW5jaFdpdGhJREJcIiBjYXBhYmlsaXR5YCk7XG4gIH1cbiAgcmV0dXJuIG9wdHMuZGV2aWNlLmlkYjtcbn1cblxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFhDVGVzdFJlc3VsdFxuICpcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0ZXN0TmFtZSBOYW1lIG9mIHRoZSB0ZXN0IChlLmcuOiAnWENUZXN0ZXJBcHBVSVRlc3RzIC0gWENUZXN0ZXJBcHBVSVRlc3RzLlhDVGVzdGVyQXBwVUlUZXN0cy90ZXN0RXhhbXBsZScpXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHBhc3NlZCBEaWQgdGhlIHRlc3RzIHBhc3M/XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGNyYXNoZWQgRGlkIHRoZSB0ZXN0cyBjcmFzaD9cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdGF0dXMgVGVzdCByZXN1bHQgc3RhdHVzIChlLmcuOiAncGFzc2VkJywgJ2ZhaWxlZCcsICdjcmFzaGVkJylcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkdXJhdGlvbiBIb3cgbG9uZyBkaWQgdGhlIHRlc3RzIHRha2UgKGluIHNlY29uZHMpXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZmFpbHVyZU1lc3NhZ2UgRmFpbHVyZSBtZXNzYWdlIChpZiBhcHBsaWNhYmxlKVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxvY2F0aW9uIFRoZSBnZW9sb2NhdGlvbiBvZiB0aGUgdGVzdHMgKGlmIGFwcGxpY2FibGUpXG4gKi9cblxuLyoqXG4gKiBQYXJzZSB0aGUgc3Rkb3V0IG9mIFhDIHRlc3QgbG9nXG4gKiBAcGFyYW0ge3N0cmluZ30gc3Rkb3V0IEEgbGluZSBvZiBzdGFuZGFyZCBvdXQgZnJvbSBgaWRiIHhjdGVzdCBydW4gLi4uYFxuICogQHJldHVybnMge0FycmF5PFhDVGVzdFJlc3VsdD59IHJlc3VsdHMgVGhlIGZpbmFsIG91dHB1dCBvZiB0aGUgWENUZXN0IHJ1blxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VYQ1Rlc3RTdGRvdXQgKHN0ZG91dCkge1xuICAvLyBQYXJzZXMgYSAna2V5JyBpbnRvIEpTT04gZm9ybWF0XG4gIGZ1bmN0aW9uIHBhcnNlS2V5IChuYW1lKSB7XG4gICAgY29uc3Qgd29yZHMgPSBuYW1lLnNwbGl0KCcgJyk7XG4gICAgbGV0IG91dCA9ICcnO1xuICAgIGZvciAoY29uc3Qgd29yZCBvZiB3b3Jkcykge1xuICAgICAgb3V0ICs9IHdvcmQuc3Vic3RyKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyB3b3JkLnN1YnN0cigxKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dC5zdWJzdHIoMCwgMSkudG9Mb3dlckNhc2UoKSArIG91dC5zdWJzdHIoMSk7XG4gIH1cblxuICAvLyBQYXJzZXMgYSAndmFsdWUnIGludG8gSlNPTiBmb3JtYXRcbiAgZnVuY3Rpb24gcGFyc2VWYWx1ZSAodmFsdWUpIHtcbiAgICB2YWx1ZSA9IHZhbHVlIHx8ICcnO1xuICAgIHN3aXRjaCAodmFsdWUudG9Mb3dlckNhc2UoKSkge1xuICAgICAgY2FzZSAndHJ1ZSc6IHJldHVybiB0cnVlO1xuICAgICAgY2FzZSAnZmFsc2UnOiByZXR1cm4gZmFsc2U7XG4gICAgICBjYXNlICcnOiByZXR1cm4gbnVsbDtcbiAgICAgIGRlZmF1bHQ6IGJyZWFrO1xuICAgIH1cbiAgICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgICAgaWYgKCFfLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUuaW5kZXhPZignLicpID4gMCkge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICghc3Rkb3V0KSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgLy8gUGFyc2UgZWFjaCBsaW5lIGludG8gYW4gYXJyYXlcbiAgY29uc3QgbGluZXMgPSBzdGRvdXQudHJpbSgpLnNwbGl0KCdcXG4nKTtcblxuICAvLyBPbmUgc2luZ2xlIHN0cmluZywganVzdCByZXR1cm4gdGhlIHN0cmluZ1xuICBpZiAobGluZXMubGVuZ3RoID09PSAxICYmICFsaW5lc1swXS5pbmNsdWRlcygnfCcpKSB7XG4gICAgcmV0dXJuIFtsaW5lc1swXV07XG4gIH1cblxuICBjb25zdCByZXN1bHRzID0gW107XG4gIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgIC8vIFRoZSBwcm9wZXJ0aWVzIGFyZSBzcGxpdCB1cCBieSBwaXBlcyBhbmQgZWFjaCBwcm9wZXJ0eVxuICAgIC8vIGhhcyB0aGUgZm9ybWF0IFwiU29tZSBLZXkgOiBTb21lIFZhbHVlXCJcbiAgICBjb25zdCBwcm9wZXJ0aWVzID0gbGluZS5zcGxpdCgnfCcpO1xuXG4gICAgLy8gUGFyc2UgZWFjaCBwcm9wZXJ0eVxuICAgIGNvbnN0IG91dHB1dCA9IHt9O1xuICAgIGxldCBlbnRyeUluZGV4ID0gMDtcbiAgICBmb3IgKGNvbnN0IHByb3Agb2YgcHJvcGVydGllcykge1xuICAgICAgaWYgKGVudHJ5SW5kZXggPT09IDApIHtcbiAgICAgICAgLy8gVGhlIGZpcnN0IHByb3BlcnR5IG9ubHkgY29udGFpbnMgb25lIHN0cmluZyB0aGF0IGNvbnRhaW5zXG4gICAgICAgIC8vIHRoZSB0ZXN0IG5hbWUgKGUuZy46ICdYQ1Rlc3RlckFwcFVJVGVzdHMgLSBYQ1Rlc3RlckFwcFVJVGVzdHMuWENUZXN0ZXJBcHBVSVRlc3RzL3Rlc3RFeGFtcGxlJylcbiAgICAgICAgb3V0cHV0LnRlc3ROYW1lID0gcHJvcC50cmltKCk7XG4gICAgICB9IGVsc2UgaWYgKHByb3AudHJpbSgpLnN0YXJ0c1dpdGgoJ0xvY2F0aW9uJykpIHtcbiAgICAgICAgLy8gVGhlIExvY2F0aW9uIHByb3BlcnR5IGhhcyBhIHZhbHVlIHRoYXQgY29tZXMgYWZ0ZXIgJ0xvY2F0aW9uJyB3aXRob3V0IGNvbG9uLlxuICAgICAgICAvLyBlLmcuIExvY2F0aW9uIC9wYXRoL3RvL1hDVGVzdGVyQXBwVUlUZXN0cy9YQ1Rlc3RlckFwcFVJVGVzdHMuc3dpZnQ6MzZcbiAgICAgICAgb3V0cHV0LmxvY2F0aW9uID0gcHJvcC5zdWJzdHJpbmcocHJvcC5pbmRleE9mKCdMb2NhdGlvbicpICsgOCkudHJpbSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IHByb3Auc3BsaXQoJzonKTtcbiAgICAgICAgb3V0cHV0W3BhcnNlS2V5KGtleS50cmltKCkpXSA9IHBhcnNlVmFsdWUodmFsdWUgPyB2YWx1ZS50cmltKCkgOiAnJyk7XG4gICAgICB9XG4gICAgICBlbnRyeUluZGV4Kys7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG4gICAgLy8gb2xkIHBhdHRlcm46IFhDVGVzdGVyQXBwVUlUZXN0cyAtIFhDVGVzdGVyQXBwVUlUZXN0cy5YQ1Rlc3RlckFwcFVJVGVzdHMvdGVzdEV4YW1wbGUgfCBQYXNzZWQ6IFRydWUgfCBDcmFzaGVkOiBGYWxzZSB8IER1cmF0aW9uOiAxLjQ4NSB8IEZhaWx1cmUgbWVzc2FnZTogIHwgTG9jYXRpb24gOjBcbiAgICAvLyBsYXRlc3QgcGF0dGVybjogWENUZXN0ZXJBcHBVSVRlc3RzIC0gWENUZXN0ZXJBcHBVSVRlc3RzLlhDVGVzdGVyQXBwVUlUZXN0cy90ZXN0RXhhbXBsZSB8IFN0YXR1czogcGFzc2VkIHwgRHVyYXRpb246IDEuOTI1NTc4OTUxODM1NjMyM1xuICAgIGlmICghb3V0cHV0LnBhc3NlZCkge1xuICAgICAgb3V0cHV0LnBhc3NlZCA9IG91dHB1dC5zdGF0dXMgPT09ICdwYXNzZWQnO1xuICAgICAgb3V0cHV0LmNyYXNoZWQgPSBvdXRwdXQuc3RhdHVzID09PSAnY3Jhc2hlZCc7XG4gICAgfSBlbHNlIGlmICghb3V0cHV0LnN0YXR1cykge1xuICAgICAgaWYgKG91dHB1dC5wYXNzZWQpIHtcbiAgICAgICAgb3V0cHV0LnN0YXR1cyA9ICdwYXNzZWQnO1xuICAgICAgfSBlbHNlIGlmIChvdXRwdXQuY3Jhc2hlZCkge1xuICAgICAgICBvdXRwdXQuc3RhdHVzID0gJ2NyYXNoZWQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0LnN0YXR1cyA9ICdmYWlsZWQnO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCB0aGlzIGxpbmUgdG8gdGhlIHJlc3VsdHNcbiAgICByZXN1bHRzLnB1c2gob3V0cHV0KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSdW5YQ1VJVGVzdFJlc3BvbnNlXG4gKlxuICogQHByb3BlcnR5IHtBcnJheTxYQ1Rlc3RSZXN1bHQ+fSByZXN1bHRzIFRoZSByZXN1bHRzIG9mIGFsbCB0aGUgdGVzdHMgd2l0aCBpbmZvcm1hdGlvblxuICogQHByb3BlcnR5IHtudW1iZXJ9IGNvZGUgVGhlIGV4aXQgY29kZSBvZiB0aGUgcHJvY2Vzc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHNpZ25hbCBUaGUgc2lnbmFsIHRoYXQgdGVybWluYXRlZCB0aGUgcHJvY2VzcyAob3IgbnVsbCkgKGUuZy46IFNJR1RFUk0pXG4gKlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUnVuWENVSVRlc3RPcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHshc3RyaW5nfSB0ZXN0UnVubmVyQnVuZGxlSWQgVGVzdCBhcHAgYnVuZGxlIChlLmcuOiAnaW8uYXBwaXVtLlhDVGVzdGVyQXBwVUlUZXN0cy54Y3RydW5uZXInKVxuICogQHByb3BlcnR5IHshc3RyaW5nfSBhcHBVbmRlclRlc3RCdW5kbGVJZCBBcHAtdW5kZXItdGVzdCBidW5kbGVcbiAqIEBwcm9wZXJ0eSB7IXN0cmluZ30geGNUZXN0QnVuZGxlSUQgeGN0ZXN0IGJ1bmRsZSBpZFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHRlc3RUeXBlIFt1aV0gWEMgdGVzdCB0eXBlLiAnYXBwJywgJ3VpJywgb3IgJ2xvZ2ljJ1xuICogQHByb3BlcnR5IHtvYmplY3R9IGVudiBFbnZpcm9ubWVudCB2YXJpYWJsZXMgcGFzc2VkIHRvIHRlc3RcbiAqIEBwcm9wZXJ0eSB7QXJyYXk8U3RyaW5nPn0gYXJncyBMYXVuY2ggYXJndW1lbnRzIHRvIHN0YXJ0IHRoZSB0ZXN0IHdpdGggKHNlZSBodHRwczovL2RldmVsb3Blci5hcHBsZS5jb20vZG9jdW1lbnRhdGlvbi94Y3Rlc3QveGN1aWFwcGxpY2F0aW9uLzE1MDA0NzctbGF1bmNoYXJndW1lbnRzIGZvciByZWZlcmVuY2UpXG4gKiBAcHJvcGVydHkge251bWJlcn0gdGltZW91dCBbMzYwMDAwXSBUaW1lb3V0IGlmIHNlc3Npb24gZG9lc24ndCBjb21wbGV0ZSBhZnRlciBnaXZlbiB0aW1lIChpbiBtaWxsaXNlY29uZHMpXG4gKi9cblxuXG4vKipcbiAqIEB0eXBlZGVmIHtFcnJvcn0gWENVSVRlc3RFcnJvclxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjb2RlIFN1YnByb2Nlc3MgZXhpdCBjb2RlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc2lnbmFsIFRoZSBzaWduYWwgKFNJRyopIHRoYXQgY2F1c2VkIHRoZSBwcm9jZXNzIHRvIGZhaWxcbiAqIEBwcm9wZXJ0eSB7IUFycmF5PFhDVGVzdFJlc3VsdD59IHJlc3VsdHMgVGhlIG91dHB1dCBvZiB0aGUgZmFpbGVkIHRlc3QgKGlmIHRoZXJlIGlzIG91dHB1dClcbiAqL1xuXG4vKipcbiAqIFJ1biBhbiBYQ1Rlc3QuIExhdW5jaGVzIGEgc3VicHJvY2VzcyB0aGF0IHJ1bnMgdGhlIFhDIFRlc3QgYW5kIGJsb2Nrc1xuICogdW50aWwgaXQgaXMgY29tcGxldGUuIFBhcnNlcyB0aGUgc3Rkb3V0IG9mIHRoZSBwcm9jZXNzIGFuZCByZXR1cm5zXG4gKiByZXN1bHQgYXMgYW4gYXJyYXlcbiAqXG4gKiBTZWUgaHR0cHM6Ly9mYmlkYi5pby9kb2NzL3Rlc3RfZXhlY3V0aW9uIGZvciByZWZlcmVuY2VcbiAqXG4gKiBAcGFyYW0ge1J1blhDVUlUZXN0T3B0aW9uc30gcnVuWENVSVRlc3RPcHRpb25zXG4gKiBAdGhyb3dzIHtYQ1VJVGVzdEVycm9yfSBFcnJvciB0aHJvd24gaWYgc3VicHJvY2VzcyByZXR1cm5zIG5vbi16ZXJvIGV4aXQgY29kZVxuICogQHJldHVybnMge1J1blhDVUlUZXN0UmVzcG9uc2V9XG4gKi9cbmNvbW1hbmRzLm1vYmlsZVJ1blhDVGVzdCA9IGFzeW5jIGZ1bmN0aW9uIHJ1blhDVGVzdCAoe1xuICB0ZXN0UnVubmVyQnVuZGxlSWQsXG4gIGFwcFVuZGVyVGVzdEJ1bmRsZUlkLFxuICB4Y3Rlc3RCdW5kbGVJZCxcbiAgdGVzdFR5cGUgPSAndWknLFxuICBlbnYsXG4gIGFyZ3MsXG4gIHRpbWVvdXQgPSBYQ1RFU1RfVElNRU9VVCxcbn0pIHtcbiAgY29uc3Qgc3VicHJvYyA9IGF3YWl0IGFzc2VydElEQih0aGlzLm9wdHMpLnJ1blhDVUlUZXN0KFxuICAgICAgICB0ZXN0UnVubmVyQnVuZGxlSWQsIGFwcFVuZGVyVGVzdEJ1bmRsZUlkLCB4Y3Rlc3RCdW5kbGVJZCwge2VudiwgYXJncywgdGVzdFR5cGV9LFxuICApO1xuICByZXR1cm4gYXdhaXQgbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGxldCBtb3N0UmVjZW50TG9nT2JqZWN0ID0gbnVsbDtcbiAgICBsZXQgeGN0ZXN0VGltZW91dDtcbiAgICBsZXQgbGFzdEVycm9yTWVzc2FnZSA9IG51bGw7XG4gICAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgICB4Y3Rlc3RUaW1lb3V0ID0gc2V0VGltZW91dChcbiAgICAgICAgKCkgPT4gcmVqZWN0KG5ldyBlcnJvcnMuVGltZW91dEVycm9yKGBUaW1lZCBvdXQgYWZ0ZXIgJyR7dGltZW91dH1tcycgd2FpdGluZyBmb3IgWENUZXN0IHRvIGNvbXBsZXRlYCkpLFxuICAgICAgICB0aW1lb3V0XG4gICAgICApO1xuICAgIH1cblxuICAgIHN1YnByb2Mub24oJ291dHB1dCcsIChzdGRvdXQsIHN0ZGVycikgPT4ge1xuICAgICAgaWYgKHN0ZG91dCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG1vc3RSZWNlbnRMb2dPYmplY3QgPSBwYXJzZVhDVGVzdFN0ZG91dChzdGRvdXQpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAvLyBGYWlscyBpZiBsb2cgcGFyc2luZyBmYWlscy5cbiAgICAgICAgICAvLyBUaGlzIGlzIGluIGNhc2UgSURCIGNoYW5nZXMgdGhlIHdheSB0aGF0IGxvZ3MgYXJlIGZvcm1hdHRlZCBhbmRcbiAgICAgICAgICAvLyBpdCBicmVha3MgJ3BhcnNlWENUZXN0U3Rkb3V0Jy4gSWYgdGhhdCBoYXBwZW5zIHdlIHN0aWxsIHdhbnQgdGhlIHByb2Nlc3NcbiAgICAgICAgICAvLyB0byBmaW5pc2hcbiAgICAgICAgICB0aGlzLmxvZy53YXJuKGBGYWlsZWQgdG8gcGFyc2UgbG9ncyBmcm9tIHRlc3Qgb3V0cHV0OiAnJHtzdGRvdXR9J2ApO1xuICAgICAgICAgIHRoaXMubG9nLmRlYnVnKGVyci5zdGFjayk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN0ZGVycikge1xuICAgICAgICBsYXN0RXJyb3JNZXNzYWdlID0gc3RkZXJyO1xuICAgICAgfVxuXG4gICAgICBzdGRvdXQgJiYgeGN0ZXN0TG9nLmluZm8oc3Rkb3V0KTtcbiAgICAgIHN0ZGVyciAmJiB4Y3Rlc3RMb2cuZXJyb3Ioc3RkZXJyKTtcbiAgICB9KTtcblxuICAgIHN1YnByb2Mub24oJ2V4aXQnLCAoY29kZSwgc2lnbmFsKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQoeGN0ZXN0VGltZW91dCk7XG4gICAgICBpZiAoY29kZSAhPT0gMCkge1xuICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IobGFzdEVycm9yTWVzc2FnZSB8fCBtb3N0UmVjZW50TG9nT2JqZWN0KTtcbiAgICAgICAgZXJyLmNvZGUgPSBjb2RlO1xuICAgICAgICBpZiAoc2lnbmFsICE9IG51bGwpIHtcbiAgICAgICAgICBlcnIuc2lnbmFsID0gc2lnbmFsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb3N0UmVjZW50TG9nT2JqZWN0KSB7XG4gICAgICAgICAgZXJyLnJlc3VsdCA9IG1vc3RSZWNlbnRMb2dPYmplY3Q7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZSh7XG4gICAgICAgIGNvZGUsIHNpZ25hbCwgcmVzdWx0czogbW9zdFJlY2VudExvZ09iamVjdCwgcGFzc2VkOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBJbnN0YWxsWENUZXN0QnVuZGxlT3B0c1xuICpcbiAqIEBwcm9wZXJ0eSB7eGN0ZXN0QXBwfSB4Y3Rlc3RCdW5kbGUgUGF0aCBvZiB0aGUgWENUZXN0IGFwcCAoVVJMIG9yIC5hcHApXG4gKi9cblxuLyoqXG4gKiBJbnN0YWxsIGFuIFhDVGVzdEJ1bmRsZVxuICpcbiAqIEBwYXJhbSB7SW5zdGFsbFhDVGVzdEJ1bmRsZU9wdHMhfSBvcHRzIEluc3RhbGwgeGN0ZXN0IGJ1bmRsZSBvcHRzXG4gKi9cbmNvbW1hbmRzLm1vYmlsZUluc3RhbGxYQ1Rlc3RCdW5kbGUgPSBhc3luYyBmdW5jdGlvbiBpbnN0YWxsWENUZXN0QnVuZGxlIChvcHRzKSB7XG4gIGNvbnN0IHsgeGN0ZXN0QXBwIH0gPSBvcHRzO1xuICBpZiAoIV8uaXNTdHJpbmcoeGN0ZXN0QXBwKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoYCd4Y3Rlc3RBcHAnIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyIGZvciAnaW5zdGFsbFhDVGVzdEJ1bmRsZScgYW5kIGAgK1xuICAgICAgYG11c3QgYmUgYSBzdHJpbmcuIEZvdW5kICcke3hjdGVzdEFwcH0nYCk7XG4gIH1cbiAgeGN0ZXN0TG9nLmluZm8oYEluc3RhbGxpbmcgYnVuZGxlICcke3hjdGVzdEFwcH0nYCk7XG4gIGNvbnN0IGlkYiA9IGFzc2VydElEQih0aGlzLm9wdHMpO1xuICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmhlbHBlcnMuY29uZmlndXJlQXBwKHhjdGVzdEFwcCwgJy54Y3Rlc3QnKTtcbiAgYXdhaXQgaWRiLmluc3RhbGxYQ1Rlc3RCdW5kbGUocmVzKTtcbn07XG5cbi8qKlxuICogTGlzdCBYQ1Rlc3QgYnVuZGxlcyB0aGF0IGFyZSBpbnN0YWxsZWQgb24gZGV2aWNlXG4gKlxuICogQHJldHVybnMge0FycmF5PHN0cmluZz59IExpc3Qgb2YgWENUZXN0IGJ1bmRsZXMgKGUuZy46IFwiWENUZXN0ZXJBcHBVSVRlc3RzLlhDVGVzdGVyQXBwVUlUZXN0cy90ZXN0TGF1bmNoUGVyZm9ybWFuY2VcIilcbiAqL1xuY29tbWFuZHMubW9iaWxlTGlzdFhDVGVzdEJ1bmRsZXMgPSBhc3luYyBmdW5jdGlvbiBsaXN0WENUZXN0c0luVGVzdEJ1bmRsZSAoKSB7XG4gIHJldHVybiBhd2FpdCBhc3NlcnRJREIodGhpcy5vcHRzKS5saXN0WENUZXN0QnVuZGxlcygpO1xufTtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBMaXN0WENUZXN0c09wdHNcbiAqXG4gKiBAcHJvcGVydHkgeyFzdHJpbmd9IGJ1bmRsZSBCdW5kbGUgSUQgb2YgdGhlIFhDVGVzdFxuICovXG5cbi8qKlxuICogTGlzdCBYQ1Rlc3RzIGluIGEgdGVzdCBidW5kbGVcbiAqXG4gKiBAcGFyYW0geyFMaXN0WENUZXN0c09wdHN9IG9wdHMgWENUZXN0IGxpc3Qgb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIHtBcnJheTxzdHJpbmc+fSBUaGUgbGlzdCBvZiB4Y3Rlc3RzIGluIHRoZSB0ZXN0IGJ1bmRsZVxuICogICAgKGUuZy46IFsgJ1hDVGVzdGVyQXBwVUlUZXN0cy5YQ1Rlc3RlckFwcFVJVGVzdHMvdGVzdEV4YW1wbGUnLFxuICAgICAgICAgICAgICAgICdYQ1Rlc3RlckFwcFVJVGVzdHMuWENUZXN0ZXJBcHBVSVRlc3RzL3Rlc3RMYXVuY2hQZXJmb3JtYW5jZScgXSApXG4gKi9cbmNvbW1hbmRzLm1vYmlsZUxpc3RYQ1Rlc3RzSW5UZXN0QnVuZGxlID0gYXN5bmMgZnVuY3Rpb24gbGlzdFhDVGVzdHNJblRlc3RCdW5kbGUgKG9wdHMpIHtcbiAgY29uc3QgeyBidW5kbGUgfSA9IG9wdHM7XG4gIGlmICghXy5pc1N0cmluZyhidW5kbGUpKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgJ2J1bmRsZScgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXIgZm9yICdsaXN0WENUZXN0c0luVGVzdEJ1bmRsZScgYW5kIGAgK1xuICAgICAgYG11c3QgYmUgYSBzdHJpbmcuIEZvdW5kICcke2J1bmRsZX0nYCk7XG4gIH1cbiAgY29uc3QgaWRiID0gYXNzZXJ0SURCKHRoaXMub3B0cyk7XG4gIHJldHVybiBhd2FpdCBpZGIubGlzdFhDVGVzdHNJblRlc3RCdW5kbGUoYnVuZGxlKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oY29tbWFuZHMpO1xuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFHQSxNQUFNQSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBQUM7QUFFcEIsTUFBTUMsY0FBYyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSTtBQUVyQyxNQUFNQyxTQUFTLEdBQUdDLGVBQU0sQ0FBQ0MsU0FBUyxDQUFDLFFBQVEsQ0FBQztBQU9yQyxTQUFTQyxTQUFTLENBQUVDLElBQUksRUFBRTtFQUFBO0VBQy9CLElBQUksa0JBQUNBLElBQUksQ0FBQ0MsTUFBTSx5Q0FBWCxhQUFhQyxHQUFHLEtBQUksQ0FBQ0YsSUFBSSxDQUFDRyxhQUFhLEVBQUU7SUFDNUMsTUFBTSxJQUFJQyxLQUFLLENBQUUsZ0ZBQStFLEdBQzdGLDhEQUE2RCxDQUFD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