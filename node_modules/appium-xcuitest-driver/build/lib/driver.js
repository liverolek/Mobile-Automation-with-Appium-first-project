"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.XCUITestDriver = void 0;
require("source-map-support/register");
var _driver = require("appium/driver");
var _support = require("appium/support");
var _lodash = _interopRequireDefault(require("lodash"));
var _url = _interopRequireDefault(require("url"));
var _appiumWebdriveragent = require("appium-webdriveragent");
var _lruCache = _interopRequireDefault(require("lru-cache"));
var _simulatorManagement = require("./simulator-management");
var _appiumIosSimulator = require("appium-ios-simulator");
var _asyncbox = require("asyncbox");
var _appUtils = require("./app-utils");
var _desiredCaps = require("./desired-caps");
var _index = _interopRequireDefault(require("./commands/index"));
var _utils = require("./utils");
var _realDeviceManagement = require("./real-device-management");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _asyncLock = _interopRequireDefault(require("async-lock"));
var _path = _interopRequireDefault(require("path"));
var _appiumIdb = _interopRequireDefault(require("appium-idb"));
var _deviceConnectionsFactory = _interopRequireDefault(require("./device-connections-factory"));
var _pyIosDeviceClient = _interopRequireDefault(require("./py-ios-device-client"));
const SHUTDOWN_OTHER_FEAT_NAME = 'shutdown_other_sims';
const CUSTOMIZE_RESULT_BUNDPE_PATH = 'customize_result_bundle_path';
const SUPPORTED_EXTENSIONS = [_appUtils.IPA_EXT, _appUtils.APP_EXT];
const MAX_ARCHIVE_SCAN_DEPTH = 1;
const defaultServerCaps = {
  webStorageEnabled: false,
  locationContextEnabled: false,
  browserName: '',
  platform: 'MAC',
  javascriptEnabled: true,
  databaseEnabled: false,
  takesScreenshot: true,
  networkConnectionEnabled: false
};
const WDA_SIM_STARTUP_RETRIES = 2;
const WDA_REAL_DEV_STARTUP_RETRIES = 1;
const WDA_REAL_DEV_TUTORIAL_URL = 'https://github.com/appium/appium-xcuitest-driver/blob/master/docs/real-device-config.md';
const WDA_STARTUP_RETRY_INTERVAL = 10000;
const DEFAULT_SETTINGS = {
  nativeWebTap: false,
  nativeWebTapStrict: false,
  useJSONSource: false,
  shouldUseCompactResponses: true,
  elementResponseAttributes: 'type,label',
  mjpegServerScreenshotQuality: 25,
  mjpegServerFramerate: 10,
  screenshotQuality: 1,
  mjpegScalingFactor: 100,
  reduceMotion: null
};
const SHARED_RESOURCES_GUARD = new _asyncLock.default();
const WEB_ELEMENTS_CACHE_SIZE = 500;
const SUPPORTED_ORIENATIONS = ['LANDSCAPE', 'PORTRAIT'];
const NO_PROXY_NATIVE_LIST = [['DELETE', /window/], ['GET', /^\/session\/[^\/]+$/], ['GET', /alert_text/], ['GET', /alert\/[^\/]+/], ['GET', /appium/], ['GET', /attribute/], ['GET', /context/], ['GET', /location/], ['GET', /log/], ['GET', /screenshot/], ['GET', /size/], ['GET', /source/], ['GET', /timeouts$/], ['GET', /url/], ['GET', /window/], ['POST', /accept_alert/], ['POST', /actions$/], ['DELETE', /actions$/], ['POST', /alert_text/], ['POST', /alert\/[^\/]+/], ['POST', /appium/], ['POST', /appium\/device\/is_locked/], ['POST', /appium\/device\/lock/], ['POST', /appium\/device\/unlock/], ['POST', /back/], ['POST', /clear/], ['POST', /context/], ['POST', /dismiss_alert/], ['POST', /element\/active/], ['POST', /element$/], ['POST', /elements$/], ['POST', /execute/], ['POST', /keys/], ['POST', /log/], ['POST', /moveto/], ['POST', /receive_async_response/], ['POST', /session\/[^\/]+\/location/], ['POST', /shake/], ['POST', /timeouts/], ['POST', /touch/], ['POST', /url/], ['POST', /value/], ['POST', /window/], ['DELETE', /cookie/], ['GET', /cookie/], ['POST', /cookie/]];
const NO_PROXY_WEB_LIST = [['GET', /attribute/], ['GET', /element/], ['GET', /text/], ['GET', /title/], ['POST', /clear/], ['POST', /click/], ['POST', /element/], ['POST', /forward/], ['POST', /frame/], ['POST', /keys/], ['POST', /refresh/]].concat(NO_PROXY_NATIVE_LIST);
const MEMOIZED_FUNCTIONS = ['getStatusBarHeight', 'getDevicePixelRatio', 'getScreenInfo'];
class XCUITestDriver extends _driver.BaseDriver {
  constructor(opts = {}, shouldValidateCaps = true) {
    super(opts, shouldValidateCaps);
    this.desiredCapConstraints = _desiredCaps.desiredCapConstraints;
    this.locatorStrategies = ['xpath', 'id', 'name', 'class name', '-ios predicate string', '-ios class chain', 'accessibility id', 'css selector'];
    this.webLocatorStrategies = ['link text', 'css selector', 'tag name', 'link text', 'partial link text'];
    this.resetIos();
    this.settings = new _driver.DeviceSettings(DEFAULT_SETTINGS, this.onSettingsUpdate.bind(this));
    this.logs = {};
    for (const fn of MEMOIZED_FUNCTIONS) {
      this[fn] = _lodash.default.memoize(this[fn]);
    }
  }
  async onSettingsUpdate(key, value) {
    if (key !== 'nativeWebTap' && key !== 'nativeWebTapStrict') {
      return await this.proxyCommand('/appium/settings', 'POST', {
        settings: {
          [key]: value
        }
      });
    }
    this.opts[key] = !!value;
  }
  resetIos() {
    this.opts = this.opts || {};
    this.wda = null;
    this.opts.device = null;
    this.jwpProxyActive = false;
    this.proxyReqRes = null;
    this.jwpProxyAvoid = [];
    this.safari = false;
    this.cachedWdaStatus = null;
    this.curWebFrames = [];
    this._currentUrl = null;
    this.curContext = null;
    this.xcodeVersion = {};
    this.contexts = [];
    this.implicitWaitMs = 0;
    this.asynclibWaitMs = 0;
    this.pageLoadMs = 6000;
    this.landscapeWebCoordsOffset = 0;
    this.remote = null;
    this._conditionInducerService = null;
    this.webElementsCache = new _lruCache.default({
      max: WEB_ELEMENTS_CACHE_SIZE
    });
  }
  get driverData() {
    return {};
  }
  async getStatus() {
    if (typeof this.driverInfo === 'undefined') {
      this.driverInfo = await (0, _utils.getDriverInfo)();
    }
    let status = {
      build: {
        version: this.driverInfo.version
      }
    };
    if (this.cachedWdaStatus) {
      status.wda = this.cachedWdaStatus;
    }
    return status;
  }
  mergeCliArgsToOpts() {
    let didMerge = false;
    for (const [key, value] of Object.entries(this.cliArgs ?? {})) {
      if (_lodash.default.has(this.opts, key)) {
        this.log.info(`CLI arg '${key}' with value '${value}' overwrites value '${this.opts[key]}' sent in via caps)`);
        didMerge = true;
      }
      this.opts[key] = value;
    }
    return didMerge;
  }
  async createSession(...args) {
    this.lifecycleData = {};
    try {
      let [sessionId, caps] = await super.createSession(...args);
      this.opts.sessionId = sessionId;
      if (this.mergeCliArgsToOpts()) {
        this.validateDesiredCaps({
          ...caps,
          ...this.cliArgs
        });
      }
      await this.start();
      caps = Object.assign({}, defaultServerCaps, caps);
      caps.udid = this.opts.udid;
      if (_lodash.default.has(this.opts, 'nativeWebTap')) {
        await this.updateSettings({
          nativeWebTap: this.opts.nativeWebTap
        });
      }
      if (_lodash.default.has(this.opts, 'nativeWebTapStrict')) {
        await this.updateSettings({
          nativeWebTapStrict: this.opts.nativeWebTapStrict
        });
      }
      if (_lodash.default.has(this.opts, 'useJSONSource')) {
        await this.updateSettings({
          useJSONSource: this.opts.useJSONSource
        });
      }
      let wdaSettings = {
        elementResponseAttributes: DEFAULT_SETTINGS.elementResponseAttributes,
        shouldUseCompactResponses: DEFAULT_SETTINGS.shouldUseCompactResponses
      };
      if (_lodash.default.has(this.opts, 'elementResponseAttributes')) {
        wdaSettings.elementResponseAttributes = this.opts.elementResponseAttributes;
      }
      if (_lodash.default.has(this.opts, 'shouldUseCompactResponses')) {
        wdaSettings.shouldUseCompactResponses = this.opts.shouldUseCompactResponses;
      }
      if (_lodash.default.has(this.opts, 'mjpegServerScreenshotQuality')) {
        wdaSettings.mjpegServerScreenshotQuality = this.opts.mjpegServerScreenshotQuality;
      }
      if (_lodash.default.has(this.opts, 'mjpegServerFramerate')) {
        wdaSettings.mjpegServerFramerate = this.opts.mjpegServerFramerate;
      }
      if (_lodash.default.has(this.opts, 'screenshotQuality')) {
        this.log.info(`Setting the quality of phone screenshot: '${this.opts.screenshotQuality}'`);
        wdaSettings.screenshotQuality = this.opts.screenshotQuality;
      }
      await this.updateSettings(wdaSettings);
      if (this.opts.mjpegScreenshotUrl) {
        this.log.info(`Starting MJPEG stream reading URL: '${this.opts.mjpegScreenshotUrl}'`);
        this.mjpegStream = new _support.mjpeg.MJpegStream(this.opts.mjpegScreenshotUrl);
        await this.mjpegStream.start();
      }
      return [sessionId, caps];
    } catch (e) {
      this.log.error(JSON.stringify(e));
      await this.deleteSession();
      throw e;
    }
  }
  getDefaultUrl() {
    return this.isRealDevice() ? `http://127.0.0.1:${this.opts.wdaLocalPort || 8100}/health` : `http://${this.opts.address.includes(':') ? `[${this.opts.address}]` : this.opts.address}:${this.opts.port}/welcome`;
  }
  async start() {
    this.opts.noReset = !!this.opts.noReset;
    this.opts.fullReset = !!this.opts.fullReset;
    await (0, _utils.printUser)();
    this.opts.iosSdkVersion = null;
    const {
      device,
      udid,
      realDevice
    } = await this.determineDevice();
    this.log.info(`Determining device to run tests on: udid: '${udid}', real device: ${realDevice}`);
    this.opts.device = device;
    this.opts.udid = udid;
    this.opts.realDevice = realDevice;
    if (this.opts.simulatorDevicesSetPath) {
      if (realDevice) {
        this.log.info(`The 'simulatorDevicesSetPath' capability is only supported for Simulator devices`);
      } else {
        this.log.info(`Setting simulator devices set path to '${this.opts.simulatorDevicesSetPath}'`);
        this.opts.device.devicesSetPath = this.opts.simulatorDevicesSetPath;
      }
    }
    if (!this.opts.platformVersion && this.opts.device) {
      this.opts.platformVersion = await this.opts.device.getPlatformVersion();
      this.log.info(`No platformVersion specified. Using device version: '${this.opts.platformVersion}'`);
    }
    const normalizedVersion = (0, _utils.normalizePlatformVersion)(this.opts.platformVersion);
    if (this.opts.platformVersion !== normalizedVersion) {
      this.log.info(`Normalized platformVersion capability value '${this.opts.platformVersion}' to '${normalizedVersion}'`);
      this.opts.platformVersion = normalizedVersion;
    }
    if (_support.util.compareVersions(this.opts.platformVersion, '<', '9.3')) {
      throw new Error(`Platform version must be 9.3 or above. '${this.opts.platformVersion}' is not supported.`);
    }
    if (_lodash.default.isEmpty(this.xcodeVersion) && (!this.opts.webDriverAgentUrl || !this.opts.realDevice)) {
      this.xcodeVersion = await (0, _utils.getAndCheckXcodeVersion)();
    }
    this.logEvent('xcodeDetailsRetrieved');
    if (_lodash.default.toLower(this.opts.browserName) === 'safari') {
      this.log.info('Safari test requested');
      this.safari = true;
      this.opts.app = undefined;
      this.opts.processArguments = this.opts.processArguments || {};
      this.opts.bundleId = _appUtils.SAFARI_BUNDLE_ID;
      this._currentUrl = this.opts.safariInitialUrl || this.getDefaultUrl();
    } else if (this.opts.app || this.opts.bundleId) {
      await this.configureApp();
    }
    this.logEvent('appConfigured');
    if (this.opts.app) {
      await (0, _utils.checkAppPresent)(this.opts.app);
      if (!this.opts.bundleId) {
        this.opts.bundleId = await (0, _appUtils.extractBundleId)(this.opts.app);
      }
    }
    await this.runReset();
    this.wda = new _appiumWebdriveragent.WebDriverAgent(this.xcodeVersion, this.opts, this.log);
    this.wda.retrieveDerivedDataPath().catch(e => this.log.debug(e));
    const memoizedLogInfo = _lodash.default.memoize(() => {
      this.log.info("'skipLogCapture' is set. Skipping starting logs such as crash, system, safari console and safari network.");
    });
    const startLogCapture = async () => {
      if (this.opts.skipLogCapture) {
        memoizedLogInfo();
        return false;
      }
      const result = await this.startLogCapture();
      if (result) {
        this.logEvent('logCaptureStarted');
      }
      return result;
    };
    const isLogCaptureStarted = await startLogCapture();
    this.log.info(`Setting up ${this.isRealDevice() ? 'real device' : 'simulator'}`);
    if (this.isSimulator()) {
      if (this.opts.shutdownOtherSimulators) {
        this.ensureFeatureEnabled(SHUTDOWN_OTHER_FEAT_NAME);
        await (0, _simulatorManagement.shutdownOtherSimulators)(this.opts.device);
      }
      await this.startSim();
      if (this.opts.customSSLCert) {
        await this.opts.device.addCertificate(this.opts.customSSLCert);
        this.logEvent('customCertInstalled');
      }
      if (await (0, _simulatorManagement.setSafariPrefs)(this.opts.device, this.opts)) {
        this.log.debug('Safari preferences have been updated');
      }
      if (await (0, _simulatorManagement.setLocalizationPrefs)(this.opts.device, this.opts)) {
        this.log.debug('Localization preferences have been updated');
      }
      if (_lodash.default.isBoolean(this.opts.reduceMotion)) {
        this.log.info(`Setting reduceMotion to ${this.opts.reduceMotion}`);
        await this.opts.device.setReduceMotion(this.opts.reduceMotion);
      }
      if (_lodash.default.isBoolean(this.opts.reduceTransparency)) {
        this.log.info(`Setting reduceTransparency to ${this.opts.reduceTransparency}`);
        await this.opts.device.setReduceTransparency(this.opts.reduceTransparency);
      }
      if (this.opts.launchWithIDB) {
        try {
          const idb = new _appiumIdb.default({
            udid
          });
          await idb.connect();
          this.opts.device.idb = idb;
        } catch (e) {
          this.log.debug(e.stack);
          this.log.warn(`idb will not be used for Simulator interaction. Original error: ${e.message}`);
        }
      }
      this.logEvent('simStarted');
      if (!isLogCaptureStarted) {
        await startLogCapture();
      }
    } else if (this.opts.customSSLCert) {
      await new _pyIosDeviceClient.default(udid).installProfile({
        payload: this.opts.customSSLCert
      });
      this.logEvent('customCertInstalled');
    }
    if (this.opts.app) {
      await this.installAUT();
      this.logEvent('appInstalled');
    }
    if (!this.opts.app && this.opts.bundleId && !this.isSafari() && !(await this.opts.device.isAppInstalled(this.opts.bundleId))) {
      this.log.errorAndThrow(`App with bundle identifier '${this.opts.bundleId}' unknown`);
    }
    if (this.isSimulator()) {
      if (this.opts.permissions) {
        this.log.debug('Setting the requested permissions before WDA is started');
        for (const [bundleId, permissionsMapping] of _lodash.default.toPairs(JSON.parse(this.opts.permissions))) {
          await this.opts.device.setPermissions(bundleId, permissionsMapping);
        }
      }
      if (_lodash.default.isBoolean(this.opts.calendarAccessAuthorized)) {
        this.log.warn(`The 'calendarAccessAuthorized' capability is deprecated and will be removed soon. ` + `Consider using 'permissions' one instead with 'calendar' key`);
        const methodName = `${this.opts.calendarAccessAuthorized ? 'enable' : 'disable'}CalendarAccess`;
        await this.opts.device[methodName](this.opts.bundleId);
      }
    }
    await this.startWda(this.opts.sessionId, realDevice);
    if (this.opts.orientation) {
      await this.setInitialOrientation(this.opts.orientation);
      this.logEvent('orientationSet');
    }
    if (this.isSafari() || this.opts.autoWebview) {
      await this.activateRecentWebview();
    }
    if (this.isSafari()) {
      if (!(this.opts.safariInitialUrl === '' || this.opts.noReset && _lodash.default.isNil(this.opts.safariInitialUrl))) {
        this.log.info(`About to set the initial Safari URL to '${this.getCurrentUrl()}'.` + `Use 'safariInitialUrl' capability in order to customize it`);
        await this.setUrl(this.getCurrentUrl());
      } else {
        this.setCurrentUrl(await this.getUrl());
      }
    }
  }
  async startWda(sessionId, realDevice) {
    if (!_support.util.hasValue(this.wda.webDriverAgentUrl)) {
      await this.wda.cleanupObsoleteProcesses();
    }
    const usePortForwarding = this.isRealDevice() && !this.wda.webDriverAgentUrl && (0, _utils.isLocalHost)(this.wda.wdaBaseUrl);
    await _deviceConnectionsFactory.default.requestConnection(this.opts.udid, this.wda.url.port, {
      devicePort: usePortForwarding ? this.wda.wdaRemotePort : null,
      usePortForwarding
    });
    let synchronizationKey = XCUITestDriver.name;
    if (this.opts.useXctestrunFile || !(await this.wda.isSourceFresh())) {
      const derivedDataPath = await this.wda.retrieveDerivedDataPath();
      if (derivedDataPath) {
        synchronizationKey = _path.default.normalize(derivedDataPath);
      }
    }
    this.log.debug(`Starting WebDriverAgent initialization with the synchronization key '${synchronizationKey}'`);
    if (SHARED_RESOURCES_GUARD.isBusy() && !this.opts.derivedDataPath && !this.opts.bootstrapPath) {
      this.log.debug(`Consider setting a unique 'derivedDataPath' capability value for each parallel driver instance ` + `to avoid conflicts and speed up the building process`);
    }
    return await SHARED_RESOURCES_GUARD.acquire(synchronizationKey, async () => {
      if (this.opts.useNewWDA) {
        this.log.debug(`Capability 'useNewWDA' set to true, so uninstalling WDA before proceeding`);
        await this.wda.quitAndUninstall();
        this.logEvent('wdaUninstalled');
      } else if (!_support.util.hasValue(this.wda.webDriverAgentUrl)) {
        await this.wda.setupCaching();
      }
      const quitAndUninstall = async msg => {
        this.log.debug(msg);
        if (this.opts.webDriverAgentUrl) {
          this.log.debug('Not quitting/uninstalling WebDriverAgent since webDriverAgentUrl capability is provided');
          throw new Error(msg);
        }
        this.log.warn('Quitting and uninstalling WebDriverAgent');
        await this.wda.quitAndUninstall();
        throw new Error(msg);
      };
      if (this.opts.resultBundlePath) {
        this.ensureFeatureEnabled(CUSTOMIZE_RESULT_BUNDPE_PATH);
      }
      const startupRetries = this.opts.wdaStartupRetries || (this.isRealDevice() ? WDA_REAL_DEV_STARTUP_RETRIES : WDA_SIM_STARTUP_RETRIES);
      const startupRetryInterval = this.opts.wdaStartupRetryInterval || WDA_STARTUP_RETRY_INTERVAL;
      this.log.debug(`Trying to start WebDriverAgent ${startupRetries} times with ${startupRetryInterval}ms interval`);
      if (!_support.util.hasValue(this.opts.wdaStartupRetries) && !_support.util.hasValue(this.opts.wdaStartupRetryInterval)) {
        this.log.debug(`These values can be customized by changing wdaStartupRetries/wdaStartupRetryInterval capabilities`);
      }
      let retryCount = 0;
      await (0, _asyncbox.retryInterval)(startupRetries, startupRetryInterval, async () => {
        this.logEvent('wdaStartAttempted');
        if (retryCount > 0) {
          this.log.info(`Retrying WDA startup (${retryCount + 1} of ${startupRetries})`);
        }
        try {
          const retries = this.xcodeVersion.major >= 10 ? 2 : 1;
          this.cachedWdaStatus = await (0, _asyncbox.retry)(retries, this.wda.launch.bind(this.wda), sessionId, realDevice);
        } catch (err) {
          this.logEvent('wdaStartFailed');
          retryCount++;
          let errorMsg = `Unable to launch WebDriverAgent because of xcodebuild failure: ${err.message}`;
          if (this.isRealDevice()) {
            errorMsg += `. Make sure you follow the tutorial at ${WDA_REAL_DEV_TUTORIAL_URL}. ` + `Try to remove the WebDriverAgentRunner application from the device if it is installed ` + `and reboot the device.`;
          }
          await quitAndUninstall(errorMsg);
        }
        this.proxyReqRes = this.wda.proxyReqRes.bind(this.wda);
        this.jwpProxyActive = true;
        let originalStacktrace = null;
        try {
          await (0, _asyncbox.retryInterval)(15, 1000, async () => {
            this.logEvent('wdaSessionAttempted');
            this.log.debug('Sending createSession command to WDA');
            try {
              this.cachedWdaStatus = this.cachedWdaStatus || (await this.proxyCommand('/status', 'GET'));
              await this.startWdaSession(this.opts.bundleId, this.opts.processArguments);
            } catch (err) {
              originalStacktrace = err.stack;
              this.log.debug(`Failed to create WDA session (${err.message}). Retrying...`);
              throw err;
            }
          });
          this.logEvent('wdaSessionStarted');
        } catch (err) {
          if (originalStacktrace) {
            this.log.debug(originalStacktrace);
          }
          let errorMsg = `Unable to start WebDriverAgent session because of xcodebuild failure: ${err.message}`;
          if (this.isRealDevice()) {
            errorMsg += ` Make sure you follow the tutorial at ${WDA_REAL_DEV_TUTORIAL_URL}. ` + `Try to remove the WebDriverAgentRunner application from the device if it is installed ` + `and reboot the device.`;
          }
          await quitAndUninstall(errorMsg);
        }
        if (this.opts.clearSystemFiles && !this.opts.webDriverAgentUrl) {
          await (0, _utils.markSystemFilesForCleanup)(this.wda);
        }
        this.wda.fullyStarted = true;
        this.logEvent('wdaStarted');
      });
    });
  }
  async runReset(opts = null) {
    this.logEvent('resetStarted');
    if (this.isRealDevice()) {
      await (0, _realDeviceManagement.runRealDeviceReset)(this.opts.device, opts || this.opts);
    } else {
      await (0, _simulatorManagement.runSimulatorReset)(this.opts.device, opts || this.opts);
    }
    this.logEvent('resetComplete');
  }
  async deleteSession() {
    await (0, _utils.removeAllSessionWebSocketHandlers)(this.server, this.sessionId);
    for (const recorder of _lodash.default.compact([this._recentScreenRecorder, this._audioRecorder, this._trafficCapture])) {
      await recorder.interrupt(true);
      await recorder.cleanup();
    }
    if (!_lodash.default.isEmpty(this._perfRecorders)) {
      await _bluebird.default.all(this._perfRecorders.map(x => x.stop(true)));
      this._perfRecorders = [];
    }
    if (this._conditionInducerService) {
      this.mobileDisableConditionInducer();
    }
    await this.stop();
    if (this.wda && !this.opts.webDriverAgentUrl) {
      if (this.opts.clearSystemFiles) {
        let synchronizationKey = XCUITestDriver.name;
        const derivedDataPath = await this.wda.retrieveDerivedDataPath();
        if (derivedDataPath) {
          synchronizationKey = _path.default.normalize(derivedDataPath);
        }
        await SHARED_RESOURCES_GUARD.acquire(synchronizationKey, async () => {
          await (0, _utils.clearSystemFiles)(this.wda);
        });
      } else {
        this.log.debug('Not clearing log files. Use `clearSystemFiles` capability to turn on.');
      }
    }
    if (this.remote) {
      this.log.debug('Found a remote debugger session. Removing...');
      await this.stopRemote();
    }
    if (this.opts.resetOnSessionStartOnly === false) {
      await this.runReset(Object.assign({}, this.opts, {
        enforceSimulatorShutdown: true
      }));
    }
    if (this.isSimulator() && !this.opts.noReset && !!this.opts.device) {
      if (this.lifecycleData.createSim) {
        this.log.debug(`Deleting simulator created for this run (udid: '${this.opts.udid}')`);
        await (0, _simulatorManagement.shutdownSimulator)(this.opts.device);
        await this.opts.device.delete();
      }
    }
    const shouldResetLocationServivce = this.isRealDevice() && !!this.opts.resetLocationService;
    if (shouldResetLocationServivce) {
      try {
        await this.mobileResetLocationService();
      } catch (ignore) {}
    }
    if (!_lodash.default.isEmpty(this.logs)) {
      await this.logs.syslog.stopCapture();
      this.logs = {};
    }
    if (this.mjpegStream) {
      this.log.info('Closing MJPEG stream');
      this.mjpegStream.stop();
    }
    this.resetIos();
    await super.deleteSession();
  }
  async stop() {
    this.jwpProxyActive = false;
    this.proxyReqRes = null;
    if (this.wda && this.wda.fullyStarted) {
      if (this.wda.jwproxy) {
        try {
          await this.proxyCommand(`/session/${this.sessionId}`, 'DELETE');
        } catch (err) {
          this.log.debug(`Unable to DELETE session on WDA: '${err.message}'. Continuing shutdown.`);
        }
      }
      if (!this.wda.webDriverAgentUrl && this.opts.useNewWDA) {
        await this.wda.quit();
      }
    }
    _deviceConnectionsFactory.default.releaseConnection(this.opts.udid);
  }
  async executeCommand(cmd, ...args) {
    this.log.debug(`Executing command '${cmd}'`);
    if (cmd === 'receiveAsyncResponse') {
      return await this.receiveAsyncResponse(...args);
    }
    if (cmd === 'getStatus') {
      return await this.getStatus();
    }
    return await super.executeCommand(cmd, ...args);
  }
  async configureApp() {
    function appIsPackageOrBundle(app) {
      return /^([a-zA-Z0-9\-_]+\.[a-zA-Z0-9\-_]+)+$/.test(app);
    }
    if (!this.opts.bundleId && appIsPackageOrBundle(this.opts.app)) {
      this.opts.bundleId = this.opts.app;
      this.opts.app = '';
    }
    if (this.opts.bundleId && appIsPackageOrBundle(this.opts.bundleId) && (this.opts.app === '' || appIsPackageOrBundle(this.opts.app))) {
      this.log.debug('App is an iOS bundle, will attempt to run as pre-existing');
      return;
    }
    switch (_lodash.default.toLower(this.opts.app)) {
      case 'settings':
        this.opts.bundleId = 'com.apple.Preferences';
        this.opts.app = null;
        return;
      case 'calendar':
        this.opts.bundleId = 'com.apple.mobilecal';
        this.opts.app = null;
        return;
    }
    this.opts.app = await this.helpers.configureApp(this.opts.app, {
      onPostProcess: this.onPostConfigureApp.bind(this),
      supportedExtensions: SUPPORTED_EXTENSIONS
    });
  }
  async unzipApp(appPath, depth = 0) {
    if (depth > MAX_ARCHIVE_SCAN_DEPTH) {
      throw new Error('Nesting of package bundles is not supported');
    }
    const [rootDir, matchedPaths] = await (0, _appUtils.findApps)(appPath, SUPPORTED_EXTENSIONS);
    if (_lodash.default.isEmpty(matchedPaths)) {
      this.log.debug(`'${_path.default.basename(appPath)}' has no bundles`);
    } else {
      this.log.debug(`Found ${_support.util.pluralize('bundle', matchedPaths.length, true)} in ` + `'${_path.default.basename(appPath)}': ${matchedPaths}`);
    }
    try {
      for (const matchedPath of matchedPaths) {
        const fullPath = _path.default.join(rootDir, matchedPath);
        if (await (0, _appUtils.isAppBundle)(fullPath)) {
          const supportedPlatforms = await (0, _appUtils.fetchSupportedAppPlatforms)(fullPath);
          if (this.isSimulator() && !supportedPlatforms.some(p => _lodash.default.includes(p, 'Simulator'))) {
            this.log.info(`'${matchedPath}' does not have Simulator devices in the list of supported platforms ` + `(${supportedPlatforms.join(',')}). Skipping it`);
            ;
            continue;
          }
          if (this.isRealDevice() && !supportedPlatforms.some(p => _lodash.default.includes(p, 'OS'))) {
            this.log.info(`'${matchedPath}' does not have real devices in the list of supported platforms ` + `(${supportedPlatforms.join(',')}). Skipping it`);
            ;
            continue;
          }
          this.log.info(`'${matchedPath}' is the resulting application bundle selected from '${appPath}'`);
          return await (0, _appUtils.isolateAppBundle)(fullPath);
        } else if (_lodash.default.endsWith(_lodash.default.toLower(fullPath), _appUtils.IPA_EXT) && (await _support.fs.stat(fullPath)).isFile()) {
          try {
            return await this.unzipApp(fullPath, depth + 1);
          } catch (e) {
            this.log.warn(`Skipping processing of '${matchedPath}': ${e.message}`);
          }
        }
      }
    } finally {
      await _support.fs.rimraf(rootDir);
    }
    throw new Error(`${this.opts.app} did not have any matching ${_appUtils.APP_EXT} or ${_appUtils.IPA_EXT} ` + `bundles. Please make sure the provided package is valid and contains at least one matching ` + `application bundle which is not nested.`);
  }
  async onPostConfigureApp({
    cachedAppInfo,
    isUrl,
    appPath
  }) {
    if (_lodash.default.isPlainObject(cachedAppInfo) && (await _support.fs.stat(appPath)).isFile() && (await _support.fs.hash(appPath)) === cachedAppInfo.packageHash && (await _support.fs.exists(cachedAppInfo.fullPath)) && (await _support.fs.glob('**/*', {
      cwd: cachedAppInfo.fullPath,
      strict: false,
      nosort: true
    })).length === cachedAppInfo.integrity.folder) {
      this.log.info(`Using '${cachedAppInfo.fullPath}' which was cached from '${appPath}'`);
      return {
        appPath: cachedAppInfo.fullPath
      };
    }
    if (await (0, _appUtils.isAppBundle)(appPath)) {
      return false;
    }
    try {
      return {
        appPath: await this.unzipApp(appPath)
      };
    } finally {
      if (isUrl) {
        await _support.fs.rimraf(appPath);
      }
    }
  }
  async determineDevice() {
    this.lifecycleData.createSim = false;
    this.opts.deviceName = (0, _utils.translateDeviceName)(this.opts.platformVersion, this.opts.deviceName);
    const setupVersionCaps = async () => {
      this.opts.iosSdkVersion = await (0, _utils.getAndCheckIosSdkVersion)();
      this.log.info(`iOS SDK Version set to '${this.opts.iosSdkVersion}'`);
      if (!this.opts.platformVersion && this.opts.iosSdkVersion) {
        this.log.info(`No platformVersion specified. Using the latest version Xcode supports: '${this.opts.iosSdkVersion}'. ` + `This may cause problems if a simulator does not exist for this platform version.`);
        this.opts.platformVersion = (0, _utils.normalizePlatformVersion)(this.opts.iosSdkVersion);
      }
    };
    if (this.opts.udid) {
      if (this.opts.udid.toLowerCase() === 'auto') {
        try {
          this.opts.udid = await (0, _utils.detectUdid)();
        } catch (err) {
          this.log.warn(`Cannot detect any connected real devices. Falling back to Simulator. Original error: ${err.message}`);
          const device = await (0, _simulatorManagement.getExistingSim)(this.opts);
          if (!device) {
            this.log.errorAndThrow(`Cannot detect udid for ${this.opts.deviceName} Simulator running iOS ${this.opts.platformVersion}`);
          }
          this.opts.udid = device.udid;
          const devicePlatform = (0, _utils.normalizePlatformVersion)(await device.getPlatformVersion());
          if (this.opts.platformVersion !== devicePlatform) {
            this.opts.platformVersion = devicePlatform;
            this.log.info(`Set platformVersion to '${devicePlatform}' to match the device with given UDID`);
          }
          await setupVersionCaps();
          return {
            device,
            realDevice: false,
            udid: device.udid
          };
        }
      } else {
        const devices = await (0, _realDeviceManagement.getConnectedDevices)();
        this.log.debug(`Available devices: ${devices.join(', ')}`);
        if (!devices.includes(this.opts.udid)) {
          this.log.debug(`No real device with udid '${this.opts.udid}'. Looking for simulator`);
          try {
            const device = await (0, _appiumIosSimulator.getSimulator)(this.opts.udid, {
              devicesSetPath: this.opts.simulatorDevicesSetPath
            });
            return {
              device,
              realDevice: false,
              udid: this.opts.udid
            };
          } catch (ign) {
            throw new Error(`Unknown device or simulator UDID: '${this.opts.udid}'`);
          }
        }
      }
      const device = await (0, _realDeviceManagement.getRealDeviceObj)(this.opts.udid);
      return {
        device,
        realDevice: true,
        udid: this.opts.udid
      };
    }
    await setupVersionCaps();
    if (this.opts.enforceFreshSimulatorCreation) {
      this.log.debug(`New simulator is requested. If this is not wanted, set 'enforceFreshSimulatorCreation' capability to false`);
    } else {
      const device = await (0, _simulatorManagement.getExistingSim)(this.opts);
      if (device) {
        return {
          device,
          realDevice: false,
          udid: device.udid
        };
      }
      this.log.info('Simulator udid not provided');
    }
    this.log.info('Using desired caps to create a new simulator');
    const device = await this.createSim();
    return {
      device,
      realDevice: false,
      udid: device.udid
    };
  }
  async startSim() {
    const runOpts = {
      scaleFactor: this.opts.scaleFactor,
      connectHardwareKeyboard: !!this.opts.connectHardwareKeyboard,
      pasteboardAutomaticSync: this.opts.simulatorPasteboardAutomaticSync ?? 'off',
      isHeadless: !!this.opts.isHeadless,
      tracePointer: this.opts.simulatorTracePointer,
      devicePreferences: {}
    };
    if (this.opts.SimulatorWindowCenter) {
      runOpts.devicePreferences.SimulatorWindowCenter = this.opts.SimulatorWindowCenter;
    }
    if (_lodash.default.isInteger(this.opts.simulatorStartupTimeout)) {
      runOpts.startupTimeout = this.opts.simulatorStartupTimeout;
    }
    const orientation = _lodash.default.isString(this.opts.orientation) && this.opts.orientation.toUpperCase();
    switch (orientation) {
      case 'LANDSCAPE':
        runOpts.devicePreferences.SimulatorWindowOrientation = 'LandscapeLeft';
        runOpts.devicePreferences.SimulatorWindowRotationAngle = 90;
        break;
      case 'PORTRAIT':
        runOpts.devicePreferences.SimulatorWindowOrientation = 'Portrait';
        runOpts.devicePreferences.SimulatorWindowRotationAngle = 0;
        break;
    }
    await this.opts.device.run(runOpts);
  }
  async createSim() {
    this.lifecycleData.createSim = true;
    const platformName = this.isTvOS() ? _desiredCaps.PLATFORM_NAME_TVOS : _desiredCaps.PLATFORM_NAME_IOS;
    const sim = await (0, _simulatorManagement.createSim)(this.opts, platformName);
    this.log.info(`Created simulator with udid '${sim.udid}'.`);
    return sim;
  }
  async launchApp() {
    const APP_LAUNCH_TIMEOUT = 20 * 1000;
    this.logEvent('appLaunchAttempted');
    await this.opts.device.launchApp(this.opts.bundleId);
    let checkStatus = async () => {
      let response = await this.proxyCommand('/status', 'GET');
      let currentApp = response.currentApp.bundleID;
      if (currentApp !== this.opts.bundleId) {
        throw new Error(`${this.opts.bundleId} not in foreground. ${currentApp} is in foreground`);
      }
    };
    this.log.info(`Waiting for '${this.opts.bundleId}' to be in foreground`);
    let retries = parseInt(APP_LAUNCH_TIMEOUT / 200, 10);
    await (0, _asyncbox.retryInterval)(retries, 200, checkStatus);
    this.log.info(`${this.opts.bundleId} is in foreground`);
    this.logEvent('appLaunched');
  }
  async startWdaSession(bundleId, processArguments) {
    const args = processArguments ? processArguments.args || [] : [];
    if (!_lodash.default.isArray(args)) {
      throw new Error(`processArguments.args capability is expected to be an array. ` + `${JSON.stringify(args)} is given instead`);
    }
    const env = processArguments ? processArguments.env || {} : {};
    if (!_lodash.default.isPlainObject(env)) {
      throw new Error(`processArguments.env capability is expected to be a dictionary. ` + `${JSON.stringify(env)} is given instead`);
    }
    if (_support.util.hasValue(this.opts.language)) {
      args.push('-AppleLanguages', `(${this.opts.language})`);
      args.push('-NSLanguages', `(${this.opts.language})`);
    }
    if (_support.util.hasValue(this.opts.locale)) {
      args.push('-AppleLocale', this.opts.locale);
    }
    if (this.opts.noReset) {
      if (_lodash.default.isNil(this.opts.shouldTerminateApp)) {
        this.opts.shouldTerminateApp = false;
      }
      if (_lodash.default.isNil(this.opts.forceAppLaunch)) {
        this.opts.forceAppLaunch = false;
      }
    }
    const wdaCaps = {
      bundleId: this.opts.autoLaunch === false ? undefined : bundleId,
      arguments: args,
      environment: env,
      eventloopIdleDelaySec: this.opts.wdaEventloopIdleDelay ?? 0,
      shouldWaitForQuiescence: this.opts.waitForQuiescence ?? true,
      shouldUseTestManagerForVisibilityDetection: this.opts.simpleIsVisibleCheck ?? false,
      maxTypingFrequency: this.opts.maxTypingFrequency ?? 60,
      shouldUseSingletonTestManager: this.opts.shouldUseSingletonTestManager ?? true,
      waitForIdleTimeout: this.opts.waitForIdleTimeout,
      shouldUseCompactResponses: this.opts.shouldUseCompactResponses,
      elementResponseFields: this.opts.elementResponseFields,
      disableAutomaticScreenshots: this.opts.disableAutomaticScreenshots,
      shouldTerminateApp: this.opts.shouldTerminateApp ?? true,
      forceAppLaunch: this.opts.forceAppLaunch ?? true,
      useNativeCachingStrategy: this.opts.useNativeCachingStrategy ?? true,
      forceSimulatorSoftwareKeyboardPresence: this.opts.forceSimulatorSoftwareKeyboardPresence ?? (this.opts.connectHardwareKeyboard === true ? false : true)
    };
    if (this.opts.autoAcceptAlerts) {
      wdaCaps.defaultAlertAction = 'accept';
    } else if (this.opts.autoDismissAlerts) {
      wdaCaps.defaultAlertAction = 'dismiss';
    }
    await this.proxyCommand('/session', 'POST', {
      capabilities: {
        firstMatch: [wdaCaps],
        alwaysMatch: {}
      }
    });
  }
  proxyActive() {
    return this.jwpProxyActive;
  }
  getProxyAvoidList() {
    if (this.isWebview()) {
      return NO_PROXY_WEB_LIST;
    }
    return NO_PROXY_NATIVE_LIST;
  }
  canProxy() {
    return true;
  }
  isSafari() {
    return !!this.safari;
  }
  isRealDevice() {
    return this.opts.realDevice;
  }
  isSimulator() {
    return !this.opts.realDevice;
  }
  isTvOS() {
    return _lodash.default.toLower(this.opts.platformName) === _lodash.default.toLower(_desiredCaps.PLATFORM_NAME_TVOS);
  }
  isWebview() {
    return this.isSafari() || this.isWebContext();
  }
  validateLocatorStrategy(strategy) {
    super.validateLocatorStrategy(strategy, this.isWebContext());
  }
  validateDesiredCaps(caps) {
    if (!super.validateDesiredCaps(caps)) {
      return false;
    }
    if (_lodash.default.toLower(caps.browserName) !== 'safari' && !caps.app && !caps.bundleId) {
      this.log.info('The desired capabilities include neither an app nor a bundleId. ' + 'WebDriverAgent will be started without the default app');
    }
    if (!_support.util.coerceVersion(caps.platformVersion, false)) {
      this.log.warn(`'platformVersion' capability ('${caps.platformVersion}') is not a valid version number. ` + `Consider fixing it or be ready to experience an inconsistent driver behavior.`);
    }
    let verifyProcessArgument = processArguments => {
      const {
        args,
        env
      } = processArguments;
      if (!_lodash.default.isNil(args) && !_lodash.default.isArray(args)) {
        this.log.errorAndThrow('processArguments.args must be an array of strings');
      }
      if (!_lodash.default.isNil(env) && !_lodash.default.isPlainObject(env)) {
        this.log.errorAndThrow('processArguments.env must be an object <key,value> pair {a:b, c:d}');
      }
    };
    if (caps.processArguments) {
      if (_lodash.default.isString(caps.processArguments)) {
        try {
          caps.processArguments = JSON.parse(caps.processArguments);
          verifyProcessArgument(caps.processArguments);
        } catch (err) {
          this.log.errorAndThrow(`processArguments must be a JSON format or an object with format {args : [], env : {a:b, c:d}}. ` + `Both environment and argument can be null. Error: ${err}`);
        }
      } else if (_lodash.default.isPlainObject(caps.processArguments)) {
        verifyProcessArgument(caps.processArguments);
      } else {
        this.log.errorAndThrow(`'processArguments must be an object, or a string JSON object with format {args : [], env : {a:b, c:d}}. ` + `Both environment and argument can be null.`);
      }
    }
    if (caps.keychainPath && !caps.keychainPassword || !caps.keychainPath && caps.keychainPassword) {
      this.log.errorAndThrow(`If 'keychainPath' is set, 'keychainPassword' must also be set (and vice versa).`);
    }
    this.opts.resetOnSessionStartOnly = !_support.util.hasValue(this.opts.resetOnSessionStartOnly) || this.opts.resetOnSessionStartOnly;
    this.opts.useNewWDA = _support.util.hasValue(this.opts.useNewWDA) ? this.opts.useNewWDA : false;
    if (caps.commandTimeouts) {
      caps.commandTimeouts = (0, _utils.normalizeCommandTimeouts)(caps.commandTimeouts);
    }
    if (_lodash.default.isString(caps.webDriverAgentUrl)) {
      const {
        protocol,
        host
      } = _url.default.parse(caps.webDriverAgentUrl);
      if (_lodash.default.isEmpty(protocol) || _lodash.default.isEmpty(host)) {
        this.log.errorAndThrow(`'webDriverAgentUrl' capability is expected to contain a valid WebDriverAgent server URL. ` + `'${caps.webDriverAgentUrl}' is given instead`);
      }
    }
    if (caps.browserName) {
      if (caps.bundleId) {
        this.log.errorAndThrow(`'browserName' cannot be set together with 'bundleId' capability`);
      }
      if (caps.app) {
        this.log.warn(`The capabilities should generally not include both an 'app' and a 'browserName'`);
      }
    }
    if (caps.permissions) {
      try {
        for (const [bundleId, perms] of _lodash.default.toPairs(JSON.parse(caps.permissions))) {
          if (!_lodash.default.isString(bundleId)) {
            throw new Error(`'${JSON.stringify(bundleId)}' must be a string`);
          }
          if (!_lodash.default.isPlainObject(perms)) {
            throw new Error(`'${JSON.stringify(perms)}' must be a JSON object`);
          }
        }
      } catch (e) {
        this.log.errorAndThrow(`'${caps.permissions}' is expected to be a valid object with format ` + `{"<bundleId1>": {"<serviceName1>": "<serviceStatus1>", ...}, ...}. Original error: ${e.message}`);
      }
    }
    if (caps.platformVersion && !_support.util.coerceVersion(caps.platformVersion, false)) {
      this.log.errorAndThrow(`'platformVersion' must be a valid version number. ` + `'${caps.platformVersion}' is given instead.`);
    }
    if (caps.additionalWebviewBundleIds) {
      caps.additionalWebviewBundleIds = this.helpers.parseCapsArray(caps.additionalWebviewBundleIds);
    }
    return true;
  }
  async installAUT() {
    if (this.isSafari()) {
      return;
    }
    await (0, _appUtils.verifyApplicationPlatform)(this.opts.app, {
      isSimulator: this.isSimulator(),
      isTvOS: this.isTvOS()
    });
    if (this.isRealDevice()) {
      await (0, _realDeviceManagement.installToRealDevice)(this.opts.device, this.opts.app, this.opts.bundleId, {
        noReset: this.opts.noReset,
        timeout: this.opts.appPushTimeout,
        strategy: this.opts.appInstallStrategy
      });
    } else {
      await (0, _simulatorManagement.installToSimulator)(this.opts.device, this.opts.app, this.opts.bundleId, {
        noReset: this.opts.noReset,
        newSimulator: this.lifecycleData.createSim
      });
    }
    if (this.opts.otherApps) {
      await this.installOtherApps(this.opts.otherApps);
    }
    if (_support.util.hasValue(this.opts.iosInstallPause)) {
      let pause = parseInt(this.opts.iosInstallPause, 10);
      this.log.debug(`iosInstallPause set. Pausing ${pause} ms before continuing`);
      await _bluebird.default.delay(pause);
    }
  }
  async installOtherApps(otherApps) {
    if (this.isRealDevice()) {
      this.log.warn('Capability otherApps is only supported for Simulators');
      return;
    }
    let appsList;
    try {
      appsList = this.helpers.parseCapsArray(otherApps);
    } catch (e) {
      this.log.errorAndThrow(`Could not parse "otherApps" capability: ${e.message}`);
    }
    if (_lodash.default.isEmpty(appsList)) {
      this.log.info(`Got zero apps from 'otherApps' capability value. Doing nothing`);
      return;
    }
    const appPaths = await _bluebird.default.all(appsList.map(app => this.helpers.configureApp(app, '.app')));
    for (const otherApp of appPaths) {
      await (0, _simulatorManagement.installToSimulator)(this.opts.device, otherApp, undefined, {
        noReset: this.opts.noReset,
        newSimulator: this.lifecycleData.createSim
      });
    }
  }
  async setInitialOrientation(orientation) {
    const dstOrientation = _lodash.default.toUpper(orientation);
    if (!SUPPORTED_ORIENATIONS.includes(dstOrientation)) {
      this.log.debug(`The initial orientation value '${orientation}' is unknown. ` + `Only ${JSON.stringify(SUPPORTED_ORIENATIONS)} are supported.`);
      return;
    }
    this.log.debug(`Setting initial orientation to '${dstOrientation}'`);
    try {
      await this.proxyCommand('/orientation', 'POST', {
        orientation: dstOrientation
      });
    } catch (err) {
      this.log.warn(`Setting initial orientation failed with: ${err.message}`);
    }
  }
  _getCommandTimeout(cmdName) {
    if (this.opts.commandTimeouts) {
      if (cmdName && _lodash.default.has(this.opts.commandTimeouts, cmdName)) {
        return this.opts.commandTimeouts[cmdName];
      }
      return this.opts.commandTimeouts[_utils.DEFAULT_TIMEOUT_KEY];
    }
  }
  async getSession() {
    const driverSession = await super.getSession();
    if (!this.wdaCaps) {
      this.wdaCaps = await this.proxyCommand('/', 'GET');
    }
    const shouldGetDeviceCaps = _lodash.default.isBoolean(this.opts.includeDeviceCapsToSessionInfo) ? this.opts.includeDeviceCapsToSessionInfo : true;
    if (shouldGetDeviceCaps && !this.deviceCaps) {
      const {
        statusBarSize,
        scale
      } = await this.getScreenInfo();
      this.deviceCaps = {
        pixelRatio: scale,
        statBarHeight: statusBarSize.height,
        viewportRect: await this.getViewportRect()
      };
    }
    this.log.info('Merging WDA caps over Appium caps for session detail response');
    return Object.assign({
      udid: this.opts.udid
    }, driverSession, this.wdaCaps.capabilities, this.deviceCaps || {});
  }
  async reset() {
    if (this.opts.noReset) {
      let opts = _lodash.default.cloneDeep(this.opts);
      opts.noReset = false;
      opts.fullReset = false;
      const shutdownHandler = this.resetOnUnexpectedShutdown;
      this.resetOnUnexpectedShutdown = () => {};
      try {
        await this.runReset(opts);
      } finally {
        this.resetOnUnexpectedShutdown = shutdownHandler;
      }
    }
    await super.reset();
  }
}
exports.XCUITestDriver = XCUITestDriver;
Object.assign(XCUITestDriver.prototype, _index.default);
var _default = XCUITestDriver;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,